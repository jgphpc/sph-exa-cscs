!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BBox	include/BBox.hpp	/^	BBox(T xmin = -1, T xmax = 1, T ymin = -1, T ymax = 1, T zmin = -1, T zmax = 1, bool PBCx = false, bool PBCy = false, bool PBCz = false) : $/;"	f	class:sphexa::BBox
BBox	include/BBox.hpp	/^class BBox$/;"	c	namespace:sphexa
Clock	include/timer.hpp	/^		typedef std::chrono::high_resolution_clock Clock;$/;"	t	namespace:sphexa::timer
Density	include/Density.hpp	/^	Density(T sincIndex = 5.0, T K = compute_3d_k(5.0)) : sincIndex(sincIndex), K(K) {}$/;"	f	class:sphexa::Density
Density	include/Density.hpp	/^class Density$/;"	c	namespace:sphexa
DistributedDomain	include/DistributedDomain.hpp	/^    DistributedDomain(MPI_Comm comm) : comm(comm), ncells(0)$/;"	f	class:sphexa::DistributedDomain
DistributedDomain	include/DistributedDomain.hpp	/^class DistributedDomain$/;"	c	namespace:sphexa
Domain	include/Domain.hpp	/^	Domain(int ngmin, int ng0, int ngmax, unsigned int bucketSize = 128) : $/;"	f	class:sphexa::Domain
Domain	include/Domain.hpp	/^class Domain$/;"	c	namespace:sphexa
EnergyConservation	include/EnergyConservation.hpp	/^class EnergyConservation$/;"	c	namespace:sphexa
EquationOfState	include/EquationOfState.hpp	/^class EquationOfState$/;"	c	namespace:sphexa
EquationOfStateSqPatch	include/EquationOfStateSqPatch.hpp	/^	EquationOfStateSqPatch(const int stabilizationTimesteps = -1) : $/;"	f	class:sphexa::EquationOfStateSqPatch
EquationOfStateSqPatch	include/EquationOfStateSqPatch.hpp	/^class EquationOfStateSqPatch$/;"	c	namespace:sphexa
K	SqPatch.hpp	/^    const T K = sphexa::compute_3d_k(sincIndex);$/;"	m	class:SqPatch
K	include/Density.hpp	/^	const T sincIndex, K;$/;"	m	class:sphexa::Density
K	include/MomentumEnergy.hpp	/^	const T K;$/;"	m	class:sphexa::MomentumEnergy
K	include/MomentumEnergySqPatch.hpp	/^    const T sincIndex, K;$/;"	m	class:sphexa::MomentumEnergySqPatch
Kcour	SqPatch.hpp	/^    const T Kcour = 0.2;$/;"	m	class:SqPatch
Kcour	include/Timestep.hpp	/^	const T Kcour, maxDtIncrease;$/;"	m	class:sphexa::Timestep
MomentumEnergy	include/MomentumEnergy.hpp	/^	MomentumEnergy(const T sincIndex = 5.0, const T K = compute_3d_k(5.0)) : sincIndex(sincIndex), K(K) {}$/;"	f	class:sphexa::MomentumEnergy
MomentumEnergy	include/MomentumEnergy.hpp	/^class MomentumEnergy$/;"	c	namespace:sphexa
MomentumEnergySqPatch	include/MomentumEnergySqPatch.hpp	/^    MomentumEnergySqPatch(const int stabilizationTimesteps = -1, const T sincIndex = 6.0, const T K = compute_3d_k(6.0)) : $/;"	f	class:sphexa::MomentumEnergySqPatch
MomentumEnergySqPatch	include/MomentumEnergySqPatch.hpp	/^class MomentumEnergySqPatch$/;"	c	namespace:sphexa
PBCx	include/BBox.hpp	/^	bool PBCx, PBCy, PBCz;$/;"	m	class:sphexa::BBox
PBCy	include/BBox.hpp	/^	bool PBCx, PBCy, PBCz;$/;"	m	class:sphexa::BBox
PBCz	include/BBox.hpp	/^	bool PBCx, PBCy, PBCz;$/;"	m	class:sphexa::BBox
PI	include/kernels.hpp	8;"	d
REPORT_TIME	sqpatch.cpp	11;"	d	file:
SqPatch	SqPatch.hpp	/^        SqPatch(int n, const std::string &filename, MPI_Comm comm) : $/;"	f	class:SqPatch
SqPatch	SqPatch.hpp	/^class SqPatch$/;"	c
Time	include/timer.hpp	/^		typedef std::chrono::duration<float> Time;$/;"	t	namespace:sphexa::timer
TimePoint	include/timer.hpp	/^		typedef std::chrono::time_point<Clock> TimePoint;$/;"	t	namespace:sphexa::timer
Timestep	include/Timestep.hpp	/^	Timestep(const T Kcour = 0.2, const T maxDtIncrease = 1.1) : Kcour(Kcour), maxDtIncrease(maxDtIncrease) {}$/;"	f	class:sphexa::Timestep
Timestep	include/Timestep.hpp	/^class Timestep$/;"	c	namespace:sphexa
UpdateQuantities	include/UpdateQuantities.hpp	/^	UpdateQuantities(const int stabilizationTimesteps = -1) : stabilizationTimesteps(stabilizationTimesteps) {}$/;"	f	class:sphexa::UpdateQuantities
UpdateQuantities	include/UpdateQuantities.hpp	/^class UpdateQuantities$/;"	c	namespace:sphexa
artificial_viscosity	include/kernels.hpp	/^inline T artificial_viscosity(T ro_i, T ro_j, T h_i, T h_j, T c_i, T c_j, T rv, T r_square)$/;"	f	namespace:sphexa
assignRanks	include/DistributedDomain.hpp	/^    void assignRanks(const std::vector<int> &procsize)$/;"	f	class:sphexa::DistributedDomain
assignedRanks	include/DistributedDomain.hpp	/^    std::vector<int> assignedRanks;$/;"	m	class:sphexa::DistributedDomain
bbox	SqPatch.hpp	/^    sphexa::BBox<T> bbox;$/;"	m	class:SqPatch
bucketSize	include/Domain.hpp	/^	const unsigned int bucketSize;$/;"	m	class:sphexa::Domain
build	include/DistributedDomain.hpp	/^    void build(const std::vector<int> &procsize, const BBox<T> &bbox, const ArrayT &x, const ArrayT &y, const ArrayT &z, const ArrayT &h, std::vector<int> &clist, std::vector<ArrayT*> &data, bool showGraph = false)$/;"	f	class:sphexa::DistributedDomain
buildTree	include/Domain.hpp	/^	void buildTree(const ArrayT &x, const ArrayT &y, const ArrayT &z, const ArrayT &h, BBox<T> &bbox)$/;"	f	class:sphexa::Domain
c	SqPatch.hpp	/^    std::vector<T> c; \/\/ Speed of sound$/;"	m	class:SqPatch
cellList	include/DistributedDomain.hpp	/^    std::vector<std::vector<int>> cellList;$/;"	m	class:sphexa::DistributedDomain
checkBoxOverlap	include/DistributedDomain.hpp	/^    bool checkBoxOverlap(const std::vector<BBox<T>> &cellBBox, T xmin, T xmax, T ymin, T ymax, T zmin, T zmax, T ri, int l)$/;"	f	class:sphexa::DistributedDomain
comm	SqPatch.hpp	/^        MPI_Comm comm;$/;"	m	class:SqPatch
comm	include/DistributedDomain.hpp	/^    MPI_Comm comm;$/;"	m	class:sphexa::DistributedDomain
comm_rank	include/DistributedDomain.hpp	/^    int comm_size, comm_rank, name_len;$/;"	m	class:sphexa::DistributedDomain
comm_size	include/DistributedDomain.hpp	/^    int comm_size, comm_rank, name_len;$/;"	m	class:sphexa::DistributedDomain
compute	include/Density.hpp	/^	void compute(const std::vector<int> &clist, const BBox<T> &bbox, const std::vector<std::vector<int>> &neighbors, const ArrayT &x, const ArrayT &y, const ArrayT &z, const ArrayT &h, const ArrayT &m, ArrayT &ro)$/;"	f	class:sphexa::Density
compute	include/EnergyConservation.hpp	/^	void compute(const std::vector<int> &clist, const ArrayT &u, const ArrayT &vx, const ArrayT &vy, const ArrayT &vz, const ArrayT &m, T &etot, T &ecin, T &eint)$/;"	f	class:sphexa::EnergyConservation
compute	include/EquationOfState.hpp	/^	void compute(const std::vector<int> &clist, const ArrayT &ro, const ArrayT &mui, ArrayT &temp, ArrayT &u, ArrayT &p, ArrayT &c, ArrayT &cv)$/;"	f	class:sphexa::EquationOfState
compute	include/EquationOfStateSqPatch.hpp	/^	void compute(const std::vector<int> &clist, const int iteration, ArrayT &ro_0, const ArrayT &p_0, ArrayT &ro, ArrayT &p, ArrayT &u, ArrayT &c)$/;"	f	class:sphexa::EquationOfStateSqPatch
compute	include/MomentumEnergy.hpp	/^	void compute(const std::vector<int> &clist, const BBox<T> &bbox, const std::vector<std::vector<int>> &neighbors, $/;"	f	class:sphexa::MomentumEnergy
compute	include/MomentumEnergySqPatch.hpp	/^    void compute(const std::vector<int> &clist, const BBox<T> &bbox, const int iteration, const std::vector<std::vector<int>> &neighbors, $/;"	f	class:sphexa::MomentumEnergySqPatch
compute	include/Timestep.hpp	/^	void compute(const std::vector<int> &clist, const ArrayT &h, const ArrayT &c, const ArrayT &dt_m1, ArrayT &dt, T &ttot)$/;"	f	class:sphexa::Timestep
compute	include/UpdateQuantities.hpp	/^	void compute(const std::vector<int> &clist, const int iteration, const ArrayT &grad_P_x, const ArrayT &grad_P_y, const ArrayT &grad_P_z, const ArrayT &dt, const ArrayT &du, $/;"	f	class:sphexa::UpdateQuantities
computeBBox	include/DistributedDomain.hpp	/^    inline BBox<T> computeBBox(const std::vector<int> &clist, const ArrayT &x, const ArrayT &y, const ArrayT &z)$/;"	f	class:sphexa::DistributedDomain
computeBBox	include/Domain.hpp	/^	void computeBBox(const ArrayT &x, const ArrayT &y, const ArrayT &z, BBox<T> &bbox)$/;"	f	class:sphexa::Domain
computeBBoxes	include/DistributedDomain.hpp	/^    void computeBBoxes(std::vector<BBox<T>> &cellBBox)$/;"	f	class:sphexa::DistributedDomain
computeDiscardList	include/DistributedDomain.hpp	/^    void computeDiscardList(const int count, std::vector<bool> &discardList)$/;"	f	class:sphexa::DistributedDomain
computeGlobalBBox	include/DistributedDomain.hpp	/^    inline BBox<T> computeGlobalBBox(const std::vector<int> &clist, const BBox<T> &bbox, const ArrayT &x, const ArrayT &y, const ArrayT &z)$/;"	f	class:sphexa::DistributedDomain
computeGlobalCellCount	include/DistributedDomain.hpp	/^    void computeGlobalCellCount()$/;"	f	class:sphexa::DistributedDomain
computeGlobalMaxH	include/DistributedDomain.hpp	/^    inline T computeGlobalMaxH(const std::vector<int> &clist, const ArrayT &h)$/;"	f	class:sphexa::DistributedDomain
computeHaloList	include/DistributedDomain.hpp	/^    void computeHaloList(const BBox<T> &bbox, bool showGraph = false)$/;"	f	class:sphexa::DistributedDomain
computeMaxH	include/DistributedDomain.hpp	/^    inline T computeMaxH(const std::vector<int> &clist, const ArrayT &h)$/;"	f	class:sphexa::DistributedDomain
compute_3d_k	include/kernels.hpp	/^inline T compute_3d_k(T n)$/;"	f	namespace:sphexa
count	SqPatch.hpp	/^    unsigned int n, count; \/\/ Number of particles$/;"	m	class:SqPatch
data	SqPatch.hpp	/^    std::vector<std::vector<T>*> data;$/;"	m	class:SqPatch
discard	include/DistributedDomain.hpp	/^    void discard(std::vector<ArrayT*> &data)$/;"	f	class:sphexa::DistributedDomain
distance	include/Density.hpp	/^inline T distance(const BBox<T> &bbox, const T hi, const T x1, const T y1, const T z1, const T x2, const T y2, const T z2)$/;"	f	namespace:sphexa
distributeParticles	include/DistributedDomain.hpp	/^    void distributeParticles(const std::vector<int> &clist, const ArrayT &x, const ArrayT &y, const ArrayT &z)$/;"	f	class:sphexa::DistributedDomain
dt	SqPatch.hpp	/^    std::vector<T> dt, dt_m1;$/;"	m	class:SqPatch
dt_m1	SqPatch.hpp	/^    std::vector<T> dt, dt_m1;$/;"	m	class:SqPatch
du	SqPatch.hpp	/^    std::vector<T> du, du_m1; \/\/variation of the energy$/;"	m	class:SqPatch
du_m1	SqPatch.hpp	/^    std::vector<T> du, du_m1; \/\/variation of the energy$/;"	m	class:SqPatch
duration	include/timer.hpp	/^		inline float duration(const TimePoint start, const TimePoint stop)$/;"	f	namespace:sphexa::timer
ecin	SqPatch.hpp	/^    T etot, ecin, eint;$/;"	m	class:SqPatch
eint	SqPatch.hpp	/^    T etot, ecin, eint;$/;"	m	class:SqPatch
etot	SqPatch.hpp	/^    T etot, ecin, eint;$/;"	m	class:SqPatch
findNeighbors	include/Domain.hpp	/^	void findNeighbors(const std::vector<int> &clist, const BBox<T> &bbox, const ArrayT &x, const ArrayT &y, const ArrayT &z, ArrayT &h, std::vector<std::vector<int>> &neighbors)$/;"	f	class:sphexa::Domain
globalBBox	include/DistributedDomain.hpp	/^    BBox<T> localBBox, globalBBox;$/;"	m	class:sphexa::DistributedDomain
globalCellCount	include/DistributedDomain.hpp	/^    std::vector<int> globalCellCount;$/;"	m	class:sphexa::DistributedDomain
globalMaxH	include/DistributedDomain.hpp	/^    T localMaxH, globalMaxH;$/;"	m	class:sphexa::DistributedDomain
grad_P_x	SqPatch.hpp	/^    std::vector<T> grad_P_x, grad_P_y, grad_P_z; \/\/gradient of the pressure$/;"	m	class:SqPatch
grad_P_y	SqPatch.hpp	/^    std::vector<T> grad_P_x, grad_P_y, grad_P_z; \/\/gradient of the pressure$/;"	m	class:SqPatch
grad_P_z	SqPatch.hpp	/^    std::vector<T> grad_P_x, grad_P_y, grad_P_z; \/\/gradient of the pressure$/;"	m	class:SqPatch
h	SqPatch.hpp	/^    std::vector<T> h; \/\/ Smoothing Length$/;"	m	class:SqPatch
haloCount	include/DistributedDomain.hpp	/^    int haloCount;$/;"	m	class:sphexa::DistributedDomain
init	SqPatch.hpp	/^    void init()$/;"	f	class:SqPatch
keepIndices	include/DistributedDomain.hpp	/^    inline void keepIndices(const std::vector<int> indices, std::vector<ArrayT*> &data)$/;"	f	class:sphexa::DistributedDomain
load	SqPatch.hpp	/^    void load(const std::string &filename)$/;"	f	class:SqPatch
loadMPI	SqPatch.hpp	/^    void loadMPI(const std::string &filename)$/;"	f	class:SqPatch
localBBox	include/DistributedDomain.hpp	/^    BBox<T> localBBox, globalBBox;$/;"	m	class:sphexa::DistributedDomain
localMaxH	include/DistributedDomain.hpp	/^    T localMaxH, globalMaxH;$/;"	m	class:sphexa::DistributedDomain
m	SqPatch.hpp	/^    std::vector<T> m; \/\/ Mass$/;"	m	class:SqPatch
main	sqpatch.cpp	/^int main()$/;"	f
makeDataArray	include/DistributedDomain.hpp	/^    void makeDataArray(std::vector<ArrayT*> &data, ArrayT* d)$/;"	f	class:sphexa::DistributedDomain
makeDataArray	include/DistributedDomain.hpp	/^    void makeDataArray(std::vector<ArrayT*> &data, ArrayT* first, Args... args)$/;"	f	class:sphexa::DistributedDomain
maxDtIncrease	SqPatch.hpp	/^    const T maxDtIncrease = 1.1;$/;"	m	class:SqPatch
maxDtIncrease	include/Timestep.hpp	/^	const T Kcour, maxDtIncrease;$/;"	m	class:sphexa::Timestep
n	SqPatch.hpp	/^    unsigned int n, count; \/\/ Number of particles$/;"	m	class:SqPatch
nX	include/DistributedDomain.hpp	/^    int nX, nY, nZ;$/;"	m	class:sphexa::DistributedDomain
nY	include/DistributedDomain.hpp	/^    int nX, nY, nZ;$/;"	m	class:sphexa::DistributedDomain
nZ	include/DistributedDomain.hpp	/^    int nX, nY, nZ;$/;"	m	class:sphexa::DistributedDomain
name_len	include/DistributedDomain.hpp	/^    int comm_size, comm_rank, name_len;$/;"	m	class:sphexa::DistributedDomain
ncells	include/DistributedDomain.hpp	/^    int ncells;$/;"	m	class:sphexa::DistributedDomain
neighbors	SqPatch.hpp	/^    std::vector<std::vector<int>> neighbors; \/\/ List of neighbor indices per particle.$/;"	m	class:SqPatch
neighborsSum	include/Domain.hpp	/^	int neighborsSum(const std::vector<int> &clist, const std::vector<std::vector<int>> &neighbors)$/;"	f	class:sphexa::Domain
ng0	SqPatch.hpp	/^    const unsigned int ngmin = 5, ng0 = 500, ngmax = 750;$/;"	m	class:SqPatch
ng0	include/Domain.hpp	/^	const int ngmin, ng0, ngmax;$/;"	m	class:sphexa::Domain
ngmax	SqPatch.hpp	/^    const unsigned int ngmin = 5, ng0 = 500, ngmax = 750;$/;"	m	class:SqPatch
ngmax	include/Domain.hpp	/^	const int ngmin, ng0, ngmax;$/;"	m	class:sphexa::Domain
ngmin	SqPatch.hpp	/^    const unsigned int ngmin = 5, ng0 = 500, ngmax = 750;$/;"	m	class:SqPatch
ngmin	include/Domain.hpp	/^	const int ngmin, ng0, ngmax;$/;"	m	class:sphexa::Domain
normalize	include/DistributedDomain.hpp	/^    inline T normalize(T d, T min, T max)$/;"	f	class:sphexa::DistributedDomain
nrank	SqPatch.hpp	/^        int nrank = 0, pnamelen = 0;$/;"	m	class:SqPatch
overlap	include/DistributedDomain.hpp	/^    inline bool overlap(T leftA, T rightA, T leftB, T rightB)$/;"	f	class:sphexa::DistributedDomain
p	SqPatch.hpp	/^    std::vector<T> p, p_0; \/\/ Pressure$/;"	m	class:SqPatch
p_0	SqPatch.hpp	/^    std::vector<T> p, p_0; \/\/ Pressure$/;"	m	class:SqPatch
pname	SqPatch.hpp	/^        char pname[MPI_MAX_PROCESSOR_NAME];$/;"	m	class:SqPatch
pnamelen	SqPatch.hpp	/^        int nrank = 0, pnamelen = 0;$/;"	m	class:SqPatch
processor_name	include/DistributedDomain.hpp	/^    char processor_name[MPI_MAX_PROCESSOR_NAME];$/;"	m	class:sphexa::DistributedDomain
rank	SqPatch.hpp	/^    int rank = 0;$/;"	m	class:SqPatch
recvHaloList	include/DistributedDomain.hpp	/^    std::map<int,int> recvHaloList;$/;"	m	class:sphexa::DistributedDomain
removeIndices	include/DistributedDomain.hpp	/^    inline void removeIndices(const std::vector<bool> indices, std::vector<ArrayT*> &data)$/;"	f	class:sphexa::DistributedDomain
removeIndices	include/Domain.hpp	/^	inline void removeIndices(const std::vector<bool> indices, std::vector<ArrayT*> &data)$/;"	f	class:sphexa::Domain
reorder	include/Domain.hpp	/^	void reorder(std::vector<ArrayT*> &data)$/;"	f	class:sphexa::Domain
reorderSwap	include/Domain.hpp	/^    void reorderSwap(const std::vector<int> &ordering, ArrayT &data)$/;"	f	class:sphexa::Domain
report_time	include/timer.hpp	/^		void report_time(std::function<void()> call, const std::string &name)$/;"	f	namespace:sphexa::timer
resize	SqPatch.hpp	/^    inline void resize(unsigned int size)$/;"	f	class:SqPatch
resize	include/DistributedDomain.hpp	/^    inline void resize(unsigned int size, std::vector<ArrayT*> &data)$/;"	f	class:sphexa::DistributedDomain
ro	SqPatch.hpp	/^    std::vector<T> ro, ro_0; \/\/ Density$/;"	m	class:SqPatch
ro_0	SqPatch.hpp	/^    std::vector<T> ro, ro_0; \/\/ Density$/;"	m	class:SqPatch
sendHaloList	include/DistributedDomain.hpp	/^    std::map<int,std::vector<int>> sendHaloList;$/;"	m	class:sphexa::DistributedDomain
sincIndex	SqPatch.hpp	/^    const T sincIndex = 6.0;$/;"	m	class:SqPatch
sincIndex	include/Density.hpp	/^	const T sincIndex, K;$/;"	m	class:sphexa::Density
sincIndex	include/MomentumEnergy.hpp	/^	const T sincIndex;$/;"	m	class:sphexa::MomentumEnergy
sincIndex	include/MomentumEnergySqPatch.hpp	/^    const T sincIndex, K;$/;"	m	class:sphexa::MomentumEnergySqPatch
sphexa	include/BBox.hpp	/^namespace sphexa$/;"	n
sphexa	include/Density.hpp	/^namespace sphexa$/;"	n
sphexa	include/DistributedDomain.hpp	/^namespace sphexa$/;"	n
sphexa	include/Domain.hpp	/^namespace sphexa$/;"	n
sphexa	include/EnergyConservation.hpp	/^namespace sphexa$/;"	n
sphexa	include/EquationOfState.hpp	/^namespace sphexa$/;"	n
sphexa	include/EquationOfStateSqPatch.hpp	/^namespace sphexa$/;"	n
sphexa	include/MomentumEnergy.hpp	/^namespace sphexa$/;"	n
sphexa	include/MomentumEnergySqPatch.hpp	/^namespace sphexa$/;"	n
sphexa	include/Timestep.hpp	/^namespace sphexa$/;"	n
sphexa	include/UpdateQuantities.hpp	/^namespace sphexa$/;"	n
sphexa	include/kernels.hpp	/^namespace sphexa$/;"	n
sphexa	include/timer.hpp	/^namespace sphexa$/;"	n
stabilizationTimesteps	SqPatch.hpp	/^    const int stabilizationTimesteps = 15;$/;"	m	class:SqPatch
stabilizationTimesteps	include/EquationOfStateSqPatch.hpp	/^	const int stabilizationTimesteps;$/;"	m	class:sphexa::EquationOfStateSqPatch
stabilizationTimesteps	include/MomentumEnergySqPatch.hpp	/^    const int stabilizationTimesteps;$/;"	m	class:sphexa::MomentumEnergySqPatch
stabilizationTimesteps	include/UpdateQuantities.hpp	/^	const int stabilizationTimesteps;$/;"	m	class:sphexa::UpdateQuantities
synchronize	include/DistributedDomain.hpp	/^    void synchronize(std::vector<ArrayT*> &data)$/;"	f	class:sphexa::DistributedDomain
synchronizeHalos	include/DistributedDomain.hpp	/^    void synchronizeHalos(Args... args)$/;"	f	class:sphexa::DistributedDomain
synchronizeHalos	include/DistributedDomain.hpp	/^    void synchronizeHalos(std::vector<ArrayT*> &data)$/;"	f	class:sphexa::DistributedDomain
timer	include/timer.hpp	/^	namespace timer$/;"	n	namespace:sphexa
tree	include/Domain.hpp	/^	Tree tree;$/;"	m	class:sphexa::Domain
ttot	SqPatch.hpp	/^    T ttot;$/;"	m	class:SqPatch
u	SqPatch.hpp	/^    std::vector<T> u; \/\/ Internal Energy$/;"	m	class:SqPatch
updateSmoothingLength	include/Domain.hpp	/^	void updateSmoothingLength(const std::vector<int> &clist, const std::vector<std::vector<int>> &neighbors, ArrayT &h)$/;"	f	class:sphexa::Domain
update_smoothing_length	include/Domain.hpp	/^static inline T update_smoothing_length(const int ng0, const int ngi, const T hi)$/;"	f	namespace:sphexa
vx	SqPatch.hpp	/^    std::vector<T> vx, vy, vz; \/\/ Velocities$/;"	m	class:SqPatch
vy	SqPatch.hpp	/^    std::vector<T> vx, vy, vz; \/\/ Velocities$/;"	m	class:SqPatch
vz	SqPatch.hpp	/^    std::vector<T> vx, vy, vz; \/\/ Velocities$/;"	m	class:SqPatch
wharmonic	include/kernels.hpp	/^inline T wharmonic(T v, T h, T sincIndex, T K)$/;"	f	namespace:sphexa
wharmonic_derivative	include/kernels.hpp	/^inline T wharmonic_derivative(T v, T h, T sincIndex, T K)$/;"	f	namespace:sphexa
workload	SqPatch.hpp	/^        std::vector<int> workload;$/;"	m	class:SqPatch
writeFile	SqPatch.hpp	/^    void writeFile(const std::vector<int> &clist, std::ofstream &outputFile)$/;"	f	class:SqPatch
x	SqPatch.hpp	/^    std::vector<T> x, y, z, x_m1, y_m1, z_m1; \/\/ Positions$/;"	m	class:SqPatch
x_m1	SqPatch.hpp	/^    std::vector<T> x, y, z, x_m1, y_m1, z_m1; \/\/ Positions$/;"	m	class:SqPatch
xmax	include/BBox.hpp	/^	T xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	class:sphexa::BBox
xmin	include/BBox.hpp	/^	T xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	class:sphexa::BBox
y	SqPatch.hpp	/^    std::vector<T> x, y, z, x_m1, y_m1, z_m1; \/\/ Positions$/;"	m	class:SqPatch
y_m1	SqPatch.hpp	/^    std::vector<T> x, y, z, x_m1, y_m1, z_m1; \/\/ Positions$/;"	m	class:SqPatch
ymax	include/BBox.hpp	/^	T xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	class:sphexa::BBox
ymin	include/BBox.hpp	/^	T xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	class:sphexa::BBox
z	SqPatch.hpp	/^    std::vector<T> x, y, z, x_m1, y_m1, z_m1; \/\/ Positions$/;"	m	class:SqPatch
z_m1	SqPatch.hpp	/^    std::vector<T> x, y, z, x_m1, y_m1, z_m1; \/\/ Positions$/;"	m	class:SqPatch
zmax	include/BBox.hpp	/^	T xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	class:sphexa::BBox
zmin	include/BBox.hpp	/^	T xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	class:sphexa::BBox
